# Telco Churn Feature Engineering

## Job Problem

# A machine learning model will be developed to predict customers who will leave the company. 
# The necessary data analysis and feature engineering steps will be performed before developing the model.

## Dataset Story

# Telco customer churn data contains information about a fictitious telecom company that provided home phone and Internet services 
# to 7043 customers in California in the third quarter. It shows which customers left, stayed or signed up for their service.

21 Variables 7043 Observation 977.5 KB

# CustomerId: Customer Id
# Gender: Gender.
# SeniorCitizen: Whether the customer is a senior citizen (1, 0)
# Partner: Whether the client is married (Yes, No)
# Dependents: Whether the client has dependents (Yes, No)
# tenure: Number of months the client has been with the company
# PhoneService: Whether the customer has phone service (Yes, No)
# MultipleLines: Whether the customer has multiple lines (Yes, No, No phone service)
# InternetService: Customer's internet service provider (DSL, Fiber optic, No)
# OnlineSecurity: Whether the customer has online security (Yes, No, No Internet service)
# OnlineBackup: Whether the customer has an online backup (Yes, No, No Internet service)
# DeviceProtection: Whether the customer has device protection (Yes, No, No Internet service)
# TechSupport: Whether the customer receives technical support (Yes, No, No Internet service)
# StreamingTV: Whether the customer has streaming TV (Yes, No, No Internet service)
# StreamingMovies: Whether the customer has streaming movies (Yes, No, No Internet service)
# Contract: Customer's contract duration (Month to month, One year, Two years)
# PaperlessBilling: Whether the customer has a paperless bill (Yes, No)
# PaymentMethod: Customer's payment method (Electronic check, Postal check, Bank transfer (automatic), Credit card (automatic))
# MonthlyCharges: Amount charged to the customer monthly
# TotalCharges: Total amount charged to the customer
# Churn: Whether the customer is using or not (Yes or No) - Customers who left in the last month or quarter

# Each row represents a unique customer
# Variables include information about customer service, account and demographic data
# Services that customers sign up for - phone, multiple lines, internet, online security, online backup, 
    # device protection, tech support, and streaming TV and movies
# Customer account information - how long they have been a customer, contract, payment method, paperless billing, monthly fees and total fees
# Demographic information about clients - gender, age range and whether they have partners and dependents

## Task 1: Exploratory Data Analysis

Step 1: General Picture

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#pip install missingno
import missingno as msno
from datetime import date
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler

def load_telco_churn():
    data = pd.read_csv("Telco-Customer-Churn.csv")
    return data

df = load_telco_churn()
df.head()

# We numericized the TotalCharges and Churn variables

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'],errors='coerce')
df["Churn"] = df["Churn"].apply(lambda x: 1 if x=="Yes" else 0)

def check_df(dataframe, head=5):
    print("################## Shape ######################")
    print(dataframe.shape)
    print("################## Type ######################")
    print(dataframe.dtypes)
    print("################## Head ######################")
    print(dataframe.head(head))
    print("################## Head ######################")
    print(dataframe.tail(head))
    print("################## NA ######################")
    print(dataframe.isnull().sum())
    print("################## Quantiles ######################")
    print(dataframe.describe([0.05, 0.5, 0.95, 0.99]).T)

check_df(df)

Step 2: Capturing numeric and categorical variables

def grab_col_names(dataframe, cat_th=10, car_th=20):
    """
    Returns the names of categorical, numeric and cardinal variables in the data set.
    
    Parameters
    ------------------
    dataframe: dataframe
    cat_th: int, float
        class threshold for variables that appear numeric but are categorical
    car_th: int, float
        class threshold for categorical but cardinal variables
    
    Returns
    ------------------
    cat_cols: list
        list of categorical variables
    num_cols: list
        numeric variable list
    cat_but_car: list
        list of variables that appear categorical but are cardinal
        
    Notes
    ------------------
    cat_cols + num_cols + cat_but_car = total number of variables
    The num_but_cat_cols list is inside cat_cols
    
    """
    cat_cols = [col for col in df.columns if str(df[col].dtype) in ["category", "bool", "object"] ]
    num_but_cat_cols = [col for col in df.columns if (str(df[col].dtype) in ["int64", "float64"])
                   and (df[col].nunique() < 10)]
    cat_but_car_cols = [col for col in df.columns if str(df[col].dtype) in ["category", "object"] 
                    and df[col].nunique()>20] 
    cat_cols = cat_cols + num_but_cat_cols
    cat_cols = [col for col in cat_cols if col not in cat_but_car_cols]
    
    num_cols = [col for col in df.columns if df[col].dtypes in ["int", "float"]]
    num_cols = [col for col in num_cols if col not in cat_cols]

cat_cols, num_cols, cat_but_car_cols = grab_col_names(df)

Step 3: Analysis of numeric and categorical variables

# this function summarizes the categoric variables entered into it and also gives the possibility to plot their graphs
def cat_summary(dataframe, col_name, plot=False):
    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                       "Ratio": 100 * dataframe[col_name].value_counts()/len(dataframe)}))
    print("###############################################")
    
    if plot:
        sns.countplot(x=dataframe[col_name], data=dataframe)
        plt.show(block=True)
        
[cat_summary(df, col, True) for col in cat_cols]

# this function summarizes the numeric variables entered into it and also gives the possibility to plot their graphs
def num_summary(dataframe, numerical_cols, plot=False):
    quantiles = [0.05, 0.1, 0.2, 0.3, 0.4, 0.9, 1]
    print(dataframe[numerical_cols].describe(quantiles).T)
    
    if plot:
        dataframe[num_cols].hist()
        plt.xlabel(numerical_cols)
        plt.title(numerical_cols)
        plt.show(block=True)
        
[num_summary(df, col, True) for col in num_cols]

# Step 4: Analysis of the target variables (average of the target variable according to categorical variables, 
# average of numerical variables according to the target variable)

# we can write a function to examine the relationship of our target variable with other categorical variables
def target_summary_with_cat(dataframe, target, categorical_col):
    print(pd.DataFrame({"Outcome": dataframe.groupby(categorical_col)[target].mean()}))
    
# We can also examine the relationship between our target variable and other categorical variables as follows
for col in cat_cols:
    target_summary_with_cat(df, "Churn", col)

# we can write a function to examine the relationship between our target variable and numeric variables
def target_summary_with_num(dataframe, target, numerical_col):
    print(dataframe.groupby(target).agg({numerical_col: "mean"}), end="\n\n\n")
    
for col in num_cols:
    target_summary_with_num(df, "Churn", col)

# Step 5: Correlation analysis.

df.corr()

sns.set(rc={"figure.figsize": (12, 12)})
sns.heatmap(df[num_cols].corr(), annot=True, cmap="RdBu").set(title='Correlation Matrix')
plt.show()

df.corrwith(df["Churn"]).sort_values(ascending=False)

## Task 2: Feature Engineering

Step 1: Missing value analysis

def missing_values_table(dataframe, na_name=False):
    na_cols = [col for col in df.columns if df[col].isnull().sum() > 0]
    n_miss = dataframe[na_cols].isnull().sum().sort_values(ascending=False)
    ratio = (dataframe[na_cols].isnull().sum()/dataframe.shape[0] * 100).sort_values(ascending=False)
    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=["n_miss", "ratio"])
    print(missing_df, end="\n")
    if na_name:
        return na_cols

na_cols = missing_values_table(df, True)

# Now we will examine whether the missing values have a relationship with the dependent variable 
# Since the number of missing values is proportionally very small, the relationship with the dependent variable is not significant

def missing_vs_target(dataframe, target, na_columns):
    temp_df = dataframe.copy()
    for col in na_columns:
        temp_df[col + "_NA_FLAG"] = np.where(temp_df[col].isnull(), 1, 0)
    na_flags = temp_df.loc[:, temp_df.columns.str.contains("_NA_")].columns
    for col in na_flags:
        print(pd.DataFrame({"TARGET_MEAN": temp_df.groupby(col)[target].mean(),
                           "Count": temp_df.groupby(col)[target].count()}), end="\n\n\n")
        
missing_vs_target(df, "Churn", na_cols)

# average TotalCharges of customers who do not leave (Churn=0) assigned to customers 
# who did not leave but have missing TotalCharges value

df.loc[(df["TotalCharges"].isnull()) & (df["Churn"]==0), "TotalCharges"] = df.groupby("Churn")["TotalCharges"].mean()[0]

# we assigned the average TotalCharges of customers who left (Churn=1) to customers 
# who left but have missing TotalCharges

df.loc[(df["TotalCharges"].isnull()) & (df["Churn"]==1), "TotalCharges"] = df.groupby("Churn")["TotalCharges"].mean()[1]

na_cols = missing_values_table(df, True)

Step 2: Let's put the data set into the model as it is.

dff = df.copy()
ohe_cols = [col for col in cat_cols if col not in ["Churn"]]

def one_hot_encoder(dataframe, categorical_cols, drop_first=False):
    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)
    return dataframe

dff = one_hot_encoder(dff, ohe_cols, drop_first=True)

# first I need to select dependent and independent variables
y = dff["Churn"]  # dependent variable
X = dff.drop(["Churn", "customerID"], axis=1) # All but two variables are independent variables
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(random_state=12345).fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

print(f"Accuracy: {round(accuracy_score(y_pred, y_test), 4)}")
print(f"Recall: {round(recall_score(y_pred,y_test),4)}")
print(f"Precision: {round(precision_score(y_pred,y_test), 4)}")
print(f"F1: {round(f1_score(y_pred,y_test), 4)}")
print(f"Auc: {round(roc_auc_score(y_pred,y_test), 4)}")

# in the current version of the dataset, our score is 78%. if I were given the information of these customers, 
# I could estimate whether 78% of these customers would go to another company or not

Step 3: Outlier analysis

# outlier detection as a function
def outlier_thresholds(dataframe, col_name, q1=0.05, q3=0.95):
    quartile1 = dataframe[col_name].quantile(q1)
    quartile3 = dataframe[col_name].quantile(q3)
    interquartile_range = quartile3 - quartile1
    up_limit = quartile3 + interquartile_range*1.5
    low_limit = quartile1 - interquartile_range*1.5
    return low_limit, up_limit

# outlier query turned into a function
def check_outliers(dataframe, col_name):
    low_limit, up_limit = outlier_thresholds(dataframe, col_name)
    if dataframe[(dataframe[col_name] < low_limit) | (df[col_name] > up_limit)].any(axis=None):
        return True
    else:
        return False
    
for col in num_cols:
    print(col, check_outliers(df, col))

Step 4: Creating new variables

df.head()

# we make a classification according to the number of months the customer stays in the company (tenure)

df['tenure_YEAR'] = pd.cut(x=df['tenure'], bins=[0, 12, 24, 36, 48, 60, 72],
                          labels=["0-1 Year", "1-2 Year", "2-3 Year", "3-4 Year", "4-5 Year", "5-6 Year"])

# Specifying customers with a 1 or 2 year contract as "Engaged"

df["ENGAGED"] = df["Contract"].apply(lambda x: 1 if x in ["One year", "Two year"] else 0)

# People who do not receive any support, backup or protection

df["NO_SUPP"] = df.apply(lambda x: 1 if (x["OnlineBackup"] != "Yes") or (x["TechSupport"] != "Yes") or
                        (x["DeviceProtection"] != "Yes") else 0, axis=1)

# Young customers with a monthly contract

df["YOUNG_ENGAGED"] = df.apply(lambda x: 1 if (x["SeniorCitizen"] == 0) and 
                               (x["ENGAGED"] == 0) else 0, axis=1)

# Total number of services received by the person

df["#_OF_SERVICES"] = (df[['PhoneService', 'InternetService', 'OnlineSecurity',
                                       'OnlineBackup', 'DeviceProtection', 'TechSupport',
                                       'StreamingTV', 'StreamingMovies']]== 'Yes').sum(axis=1)

# People who receive any streaming service

df["ANY_STREAMING"] = df.apply(lambda x: 1 if (x["StreamingTV"] == "Yes") or 
                               (x["StreamingMovies"] == "Yes") else 0, axis=1)

# Does the person make automatic payments?

df["AUTO_PAYMENT"] = df.apply(lambda x: 1 if (x["PaymentMethod"] in ["Bank transfer (automatic)",
                        "Credit card (automatic)"]) else 0, axis=1)

# average monthly payment for each customer
# tenure value can be zero

df["AVE_CHARGE"] = df["TotalCharges"] / (df["tenure"] + 1)

# Increase in current price compared to average price

df["INCREASE"] = df["AVE_CHARGE"] / df["MonthlyCharges"]

# Fee per service

df["CHARGE_PER_SERVICE"] = df["MonthlyCharges"] / (df["#_OF_SERVICES"] + 1)

print(df.shape)
df.head()

cat_cols, num_cols, cat_but_car = grab_col_names(df)

Step 5: Encoding operations

# label encoding

binary_cols = [col for col in df.columns if df[col].dtype == "O" and df[col].nunique() == 2]

def label_encoder(dataframe, binary_col):
    labelencoder = LabelEncoder()
    dataframe[binary_col] = labelencoder.fit_transform(dataframe[binary_col])
    return dataframe

for col in binary_cols:
    label_encoder(df, col)
    
df.head()

# one-hot encoding
# We will not apply OHE to binary_cols and Churn variable where I apply label encoding

ohe_cols = [col for col in cat_cols if col not in binary_cols and col not in ["Churn", "#_OF_SERVICES"]] 
ohe_cols

def one_hot_encoder(dataframe, categorical_cols, drop_first=False):
    dataframe = pd.get_dummies(dataframe, columns=categorical_cols, drop_first=drop_first)
    return dataframe

df = one_hot_encoder(df, ohe_cols, drop_first=True)

df.head()

Step 6: Standardization for numeric variables.

scaler = RobustScaler()
df[num_cols] = scaler.fit_transform(df[num_cols])
df.head()

Step 7: Model creation

# first I need to select dependent and independent variables

y = df["Churn"]  # dependent variable
X = df.drop(["Churn", "customerID"], axis=1) # All but two variables are independent variables
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(random_state=46).fit(X_train, y_train)
y_pred = rf_model.predict(X_test)

print(f"Accuracy: {round(accuracy_score(y_pred, y_test), 4)}")
print(f"Recall: {round(recall_score(y_pred,y_test),4)}")
print(f"Precision: {round(precision_score(y_pred,y_test), 4)}")
print(f"F1: {round(f1_score(y_pred,y_test), 4)}")
print(f"Auc: {round(roc_auc_score(y_pred,y_test), 4)}")

# our score was 78%, so if I were given the information of these customers, 
# I can predict whether 78% of these customers would go to another company or not
# the feature engineering step didn't change our model score much

# What about our newly created variables?
# For this we will use a ready-made function "feature_importance"

def plot_importance(model, features, num=len(X), save=False):
    feature_imp = pd.DataFrame({"Value": model.feature_importances_, "Feature": features.columns})
    plt.figure(figsize=(10, 10))
    sns.set(font_scale=1)
    sns.barplot(x="Value", y="Feature", data=feature_imp.sort_values(by="Value",
                                                                    ascending=False)[0:num])
    plt.title("Features")
    plt.tight_layout()
    plt.show()
    if save:
        plt.savefig("importances.png")

plot_importance(rf_model, X_train)

